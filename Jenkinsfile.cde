node ('ecs-fargate') {
	def branch = "${env.BRANCH_NAME}".toLowerCase()

	stage('git') {
		/* Changed due to a bug: "${scmBranch} is returning UNKNOW"
		 * (https://github.com/mojohaus/buildnumber-maven-plugin/issues/53#issuecomment-373110568) */
		//checkout scm
		//def jobName = "${env.JOB_NAME}"
		//def repoPath = jobName.substring(0, jobName.lastIndexOf('/'))
		git url: "https://macpersia@bitbucket.org/planty-assistant-devs/planty-assistant-agent.git", branch: branch
	}

//    stage ('jdk preparation') {
//        //tool name: 'jdk10', type: 'jdk'
//        sh "wget https://download.java.net/java/GA/jdk10/10.0.2/19aef61b38124481863b1413dce1855f/13/openjdk-10.0.2_linux-x64_bin.tar.gz"
//        sh "tar -xvf openjdk-10.0.2_linux-x64_bin.tar.gz"
//
//        //env.JAVA_HOME="${tool 'jdk10'}"
//        env.JAVA_HOME="./jdk-10.0.2"
//
//        env.PATH="${env.JAVA_HOME}/bin:${env.PATH}"
//        sh 'java -version'
//    }

	stage('build') {
		//withMaven(jdk: 'jdk-10.0.2', maven: 'maven-3.6.0', /*, tempBinDir: ''*/) {
        /* Requires the Docker Pipeline plugin to be installed */
        //docker.image('artifactory.topdanmark.local:5001/jenkins/slave:latest-jdk11')
                //.withRun('-v $HOME/.m2:/root/.m2 -v $PWD:/tmp/planty-assistant-agent -v $MAVEN_HOME:/tmp/maven') { c ->
                //.withRun(''' \
                //    --mount type=bind,source=$HOME/.m2,target=/root/.m2 \
                //    --mount type=bind,source=$PWD,target=/tmp/planty-assistant-agent \
                //    --mount type=bind,source=$MAVEN_HOME,target=/tmp/maven \
                //''') { c ->
        docker.image('artifactory.topdanmark.local:5001/openjdk:11-jdk')
                .withRun('-t') { c ->

            sh "docker logs ${c.id}"
            sh "docker exec -t ${c.id} sh -c 'ls -lad ~/'"
            sh "docker exec -t ${c.id} sh -c 'mkdir ~/.m2'"
            //sh "docker cp \$HOME/.m2/settings.xml ${c.id}:~/.m2/settings.xml"
            sh "docker cp \$HOME/.m2/settings.xml ${c.id}:/root/.m2/settings.xml"

            sh "docker cp \$PWD         ${c.id}:/tmp/planty-assistant-agent"
            sh "docker cp \$MAVEN_HOME  ${c.id}:/tmp/maven"

            //sh "docker exec -t ${c.id} ls -la /usr/lib/jvm*"
            sh "docker exec -t ${c.id} java -version"
            sh "docker exec -t ${c.id} javac -version"
            sh "docker exec -t ${c.id} ls -la /tmp/maven"
            sh "docker exec -t ${c.id} /tmp/maven/bin/mvn -v"

            //print "Evaluating project.version..."
            //def pomVerJStr = sh(script: "mvn help:evaluate -Dexpression=project.version | grep -v '^\\['", returnStdout: true)
            //def pomVer = "${pomVerJStr}".split("\n").last()
            //print "Evaluated project.version: ${pomVer}"

            sh "docker exec -t ${c.id} ls -la /tmp/planty-assistant-agent"
            sh "docker exec -t -w /tmp/planty-assistant-agent ${c.id} /tmp/maven/bin/mvn package -DskipTests"
            sh "docker cp ${c.id}:/tmp/planty-assistant-agent/target \$PWD/target"
            sh "ls -la \$PWD/target"
            topCompliance()
        }
	}
}

